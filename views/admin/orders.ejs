<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å - –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</title>
    <link rel="stylesheet" href="/css/common.css">
    <link rel="stylesheet" href="/css/admin.css">
    <style>
        .order-item-image {
            width: 50px;
            height: 60px;
            object-fit: cover;
            border-radius: 4px;
            border: 1px solid var(--color-border-light);
            margin-right: 10px;
            vertical-align: middle;
        }
         .orders-table td[data-label="–¢–æ–≤–∞—Ä–∏"] ul {
            padding-left: 0;
        }
        .orders-table td[data-label="–¢–æ–≤–∞—Ä–∏"] li {
            display: flex;
            align-items: center;
            margin-bottom: 5px;
        }
         .orders-table td[data-label="–¢–æ–≤–∞—Ä–∏"] li a {
            margin-left: 5px;
        }
    </style>
</head>
<body class="admin-body">
    <header class="admin-header">
        <div class="container">
            <h1>–ü–∞–Ω–µ–ª—å –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h1>
            <nav>
                <a href="/admin/orders" class="active">–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</a>
                <a href="/admin/products">–¢–æ–≤–∞—Ä–∏</a>
                <a href="/admin/blog">–ë–ª–æ–≥</a>
                <a href="/admin/blog/html-guide">HTML –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è</a>
                <a href="/admin/logout">–í–∏–π—Ç–∏</a>
            </nav>
        </div>
    </header>

    <main class="admin-main">
        <div class="container">
            <h2>–°–ø–∏—Å–æ–∫ –ó–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è</h2>

            <% if (typeof orders !== 'undefined' && orders.length > 0) { %>
                <div class="table-responsive-wrapper">
                    <table class="orders-table">
                        <thead>
                            <tr>
                                <th>–î–∞—Ç–∞</th>
                                <th>–Ü–º'—è</th>
                                <th>–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                <th>Email</th>
                                <th>–°—Ç–∞—Ç—É—Å</th>
                                <th>–¢–æ–≤–∞—Ä–∏</th>
                                <th>–ö–æ–º–µ–Ω—Ç–∞—Ä</th>
                                <th>–î—ñ—ó</th>
                            </tr>
                        </thead>
                        <tbody>
                            <% orders.forEach(order => { %>
                                <tr data-order-id="<%= order._id %>">
                                    <td data-label="–î–∞—Ç–∞"><%= new Date(order.receivedAt).toLocaleString('uk-UA', { year: 'numeric', month: 'numeric', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %></td>
                                    <td data-label="–Ü–º'—è"><%= order.contactInfo.name %></td>
                                    <td data-label="–¢–µ–ª–µ—Ñ–æ–Ω"><a href="tel:<%= order.contactInfo.phone %>"><%= order.contactInfo.phone %></a></td>
                                    <td data-label="Email"><a href="mailto:<%= order.contactInfo.email %>"><%= order.contactInfo.email %></a></td>
                                    <td data-label="–°—Ç–∞—Ç—É—Å">
                                        <select class="order-status-select" data-order-id="<%= order._id %>">
                                            <option value="–ù–æ–≤–∏–π" <%= order.status === '–ù–æ–≤–∏–π' ? 'selected' : '' %>>–ù–æ–≤–∏–π</option>
                                            <option value="–í –æ–±—Ä–æ–±—Ü—ñ" <%= order.status === '–í –æ–±—Ä–æ–±—Ü—ñ' ? 'selected' : '' %>>–í –æ–±—Ä–æ–±—Ü—ñ</option>
                                            <option value="–£–∑–≥–æ–¥–∂–µ–Ω–æ" <%= order.status === '–£–∑–≥–æ–¥–∂–µ–Ω–æ' ? 'selected' : '' %>>–£–∑–≥–æ–¥–∂–µ–Ω–æ</option>
                                            <option value="–í–∏–∫–æ–Ω–∞–Ω–æ" <%= order.status === '–í–∏–∫–æ–Ω–∞–Ω–æ' ? 'selected' : '' %>>–í–∏–∫–æ–Ω–∞–Ω–æ</option>
                                            <option value="–°–∫–∞—Å–æ–≤–∞–Ω–æ" <%= order.status === '–°–∫–∞—Å–æ–≤–∞–Ω–æ' ? 'selected' : '' %>>–°–∫–∞—Å–æ–≤–∞–Ω–æ</option>
                                        </select>
                                    </td>
                                    <td data-label="–¢–æ–≤–∞—Ä–∏">
                                        <ul>
                                            <% order.items.forEach(item => { %>
                                                <li>
                                                    <% if (item.imageUrl) { %>
                                                        <img src="<%= item.imageUrl %>" alt="<%= item.name %>" class="order-item-image">
                                                    <% } %>
                                                   <a href="/product/<%= item.productId %>" target="_blank" title="–ü–µ—Ä–µ–π—Ç–∏ –¥–æ —Ç–æ–≤–∞—Ä—É"><%= item.name %></a>
                                                   (x<%= item.quantity %>)
                                                </li>
                                            <% }); %>
                                        </ul>
                                        <% if (order.customDescription && order.customDescription !== '–ù–µ –≤–∫–∞–∑–∞–Ω–æ') { %>
                                            <p class="custom-description"><em>–ö–∞—Å—Ç–æ–º: <%= order.customDescription %></em></p>
                                        <% } %>
                                    </td>
                                    <td data-label="–ö–æ–º–µ–Ω—Ç–∞—Ä"><%= order.comments && order.comments.trim() ? order.comments : '-' %></td>
                                    <td data-label="–î—ñ—ó">
                                        <button class="btn-delete-order" data-order-id="<%= order._id %>" title="–í–∏–¥–∞–ª–∏—Ç–∏">üóëÔ∏è</button>
                                    </td>
                                </tr>
                            <% }); %>
                        </tbody>
                    </table>
                </div>
            <% } else { %>
                <p>–ù–æ–≤–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤ –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–µ–º–∞—î.</p>
            <% } %>
        </div>
    </main>

    <div id="confirmationModal" class="modal" style="display: none;">
        <div class="modal-content">
            <span class="close-button">&times;</span>
            <p id="confirmationMessage">–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ?</p>
            <button id="confirmActionBtn" class="btn btn-danger">–¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏</button>
            <button id="cancelActionBtn" class="btn btn-secondary">–°–∫–∞—Å—É–≤–∞—Ç–∏</button>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const ordersTable = document.querySelector('.orders-table');
            const modal = document.getElementById('confirmationModal');
            
            if (!modal) return; 
            
            const closeButton = modal.querySelector('.close-button');
            const confirmBtn = document.getElementById('confirmActionBtn');
            const cancelBtn = document.getElementById('cancelActionBtn');
            const confirmationMessage = document.getElementById('confirmationMessage');
            let actionToConfirm = null; 

            if (!ordersTable) return; 

            const showModal = (message, onConfirm) => {
                if (!confirmationMessage) return;
                confirmationMessage.textContent = message;
                actionToConfirm = onConfirm; 
                modal.style.display = 'block';
            };

            const closeModal = () => {
                modal.style.display = 'none';
                actionToConfirm = null; 
            };

            if(confirmBtn) confirmBtn.addEventListener('click', () => {
                if (typeof actionToConfirm === 'function') {
                    actionToConfirm(); 
                }
                closeModal();
            });

            if(cancelBtn) cancelBtn.addEventListener('click', closeModal);
            if(closeButton) closeButton.addEventListener('click', closeModal);
            
            window.addEventListener('click', (event) => { 
                if (event.target == modal) {
                    closeModal();
                }
            });

            ordersTable.addEventListener('change', async (event) => {
                if (event.target.classList.contains('order-status-select')) {
                    const select = event.target;
                    const orderId = select.dataset.orderId;
                    const newStatus = select.value;

                    console.log(`–ó–º—ñ–Ω–∞ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è ${orderId} –Ω–∞ ${newStatus}`);
                    try {
                        const response = await fetch(`/admin/orders/${orderId}/update-status`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ newStatus })
                        });
                        const result = await response.json();
                        if (!response.ok) { 
                           throw new Error(result.message || `HTTP error! status: ${response.status}`);
                        }
                        if (result.success) {
                            console.log('–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!');
                            select.style.borderColor = 'green'; 
                            setTimeout(() => { select.style.borderColor = ''; }, 1500);
                        } else {
                           throw new Error(result.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É');
                        }
                    } catch (err) {
                        console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—É:', err);
                        alert(`–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: ${err.message}`);
                    }
                }
            });

            ordersTable.addEventListener('click', (event) => {
                const deleteButton = event.target.closest('.btn-delete-order');
                if (deleteButton) {
                    const orderId = deleteButton.dataset.orderId;
                    const orderRow = deleteButton.closest('tr'); 

                    showModal(`–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}?`, async () => {
                        console.log(`–í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderId}`);
                        try {
                            const response = await fetch(`/admin/orders/${orderId}`, {
                                method: 'DELETE'
                            });
                            const result = await response.json();
                             if (!response.ok) { 
                                throw new Error(result.message || `HTTP error! status: ${response.status}`);
                             }
                            if (result.success) {
                                console.log('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–æ!');
                                if(orderRow) orderRow.remove(); 
                            } else {
                                throw new Error(result.message || '–ù–µ–≤—ñ–¥–æ–º–∞ –ø–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
                            }
                        } catch (err) {
                            console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ:', err);
                            alert(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: ${err.message}`);
                        }
                    });
                }
            });
        });
    </script>
</body>
</html>